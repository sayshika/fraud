/* Enter a unique ExecutionPlan */
@Plan:name('Markov_MissProbMetric')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('stateStream:1.0.0')
define stream stateStream (txnid string, cardnum long, txnamt double, currency string, email string, shippingaddress string, billingaddress string, ip string, itemNo string, qty int, timestamp long, state string);

@Export('fraudStream:1.0.1')
define stream fraudStream (txnid string, cardnum long, txnamt double, currency string, email string, shippingaddress string, billingaddress string, ip string, itemNo string, qty int, timestamp long, score double, fraudflag int);


@from(eventtable = 'rdbms' , datasource.name = 'FraudToolbox' , table.name = 'MarkovModelTable')
define table MarkovModelTable (transition string, firstState string, count double, probability double);


from every ta = stateStream ->
tb = stateStream
select tb.txnid, tb.cardnum, tb.itemNo, tb.txnamt, tb.currency, tb.email, tb.shippingaddress, tb.billingaddress, tb.ip, tb.qty,  tb.timestamp, ta.state as nextState, str:concat(ta.state,tb.state) as transition
insert into metricStream;

/****************************************************** Calculate Miss Probability ***************************************************************************************************************************************************************/
from metricStream[not((transition == MarkovModelTable.transition) in MarkovModelTable)]
select metricStream.txnid, metricStream.cardnum , metricStream.itemNo , metricStream.txnamt ,metricStream.currency, metricStream.email, metricStream.shippingaddress, metricStream.billingaddress, metricStream.ip, metricStream.qty, metricStream.timestamp , metricStream.nextState , metricStream.transition , 0.0 as MissProbability
insert into metricValueStream;

from metricStream join MarkovModelTable
on metricStream.transition == MarkovModelTable.transition
select metricStream.txnid, metricStream.cardnum , metricStream.itemNo , metricStream.txnamt ,metricStream.currency, metricStream.email, metricStream.shippingaddress, metricStream.billingaddress, metricStream.ip, metricStream.qty, metricStream.timestamp , metricStream.nextState , metricStream.transition , (1- MarkovModelTable.probability) as MissProbability
insert into metricValueStream;

/****************************************************** Normalize Miss Probability ******************************************************************************/
from metricValueStream#window.length(5)
select txnid , cardnum , itemNo , txnamt , currency, email, shippingaddress, billingaddress, ip, qty,  timestamp , nextState, transition, avg (MissProbability) as NormalizeMissProbability
insert into NormalizeMissProbabilityStream;


/****************************************************** Compare Normalize Miss Probability with Threshold ***************************************/
from NormalizeMissProbabilityStream[NormalizeMissProbability < 10]
select txnid , cardnum , txnamt , currency, email, shippingaddress, billingaddress, ip, itemNo , qty, timestamp, 0.0 as score, 100 as fraudflag
insert into fraudStream;