/* Enter a unique ExecutionPlan */
@Plan:name('FS_AbnormalFrequency')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('FS_AbnormalFrequency')

/* define streams/tables and write queries here ... */

@Import('transactionStream:1.0.0')
define stream input (txnid string, cardnum long, txnamt double, currency string, email string, shippingaddress string, billingaddress string, ip string, itemNo string, qty int, timestamp long);

@Export('scoreStream:1.0.1')
define stream scoreStream (txnid string, cardnum long, txnamt double, currency string, email string, shippingaddress string, billingaddress string, ip string, itemNo string, qty int, timestamp long, score double);

from input#window.externalTime(timestamp, 1 day)
select count(cardnum) as txnCounter, txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp, 5.0 as score
group by cardnum
having txnCounter > 5 
insert into tempStream;

from input#window.externalTime(timestamp, 1 day)
select count(cardnum) as txnCounter, txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp, 0.0 as score
group by cardnum
having txnCounter <= 5 
insert into tempStream;

from tempStream
select txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp,  score
insert into scoreStream;
                    