/* Enter a unique ExecutionPlan */
@Plan:name('FS_ThreeRejects')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */
@Import('transactionStream:1.0.0')
define stream input (txnid string, cardnum long, txnamt double, currency string, email string, shippingaddress string, billingaddress string, ip string, itemNo string, qty int, timestamp long);

@Export('scoreStream:1.0.1')
define stream scoreStream (txnid string, cardnum long, txnamt double, currency string, email string, shippingaddress string, billingaddress string, ip string, itemNo string, qty int, timestamp long, score double);

@from(eventtable = 'rdbms' , datasource.name = 'FraudToolbox' , table.name = 'FraudCount')
define table FraudCount (cardnum long, txnid string);

from input[((cardnum==FraudCount.cardnum) in FraudCount)]
select txnid, input.cardnum, count(input.cardnum) as txnCount, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp
group by cardnum
insert into tempStream;

from tempStream[txnCount>3]
select txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp,  15.0 as score
insert into scoreStream;

from tempStream[txnCount<=3]
select txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp,  0.0 as score
insert into scoreStream;

from input[not((cardnum==FraudCount.cardnum) in FraudCount)]
select txnid, input.cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp, 0.0 as score
insert into scoreStream;