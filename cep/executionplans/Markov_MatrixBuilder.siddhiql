/* Enter a unique ExecutionPlan */
@Plan:name('Markov_MatrixBuilder')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('stateStream:1.0.0')
define stream stateStream (txnid string, cardnum long, txnamt double, currency string, email string, shippingaddress string, billingaddress string, ip string, itemNo string, qty int, timestamp long, state string);

define table MarkovModelTable (transition string, firstState string, count double, probability double);
define table firstCountTable (firstState string, count double);

from every a = stateStream -> b = stateStream
select a.state as firstState, b.state as nextState, str:concat(a.state,b.state) as transition
insert into transitionStream;

from transitionStream as t join firstCountTable
on firstState == firstCountTable.firstState
select t.firstState, (firstCountTable.count+1) as count
update firstCountTable
on firstState==firstCountTable.firstState;

from transitionStream[not((transition==MarkovModelTable.transition) in MarkovModelTable)]
select transition, firstState, 1.0 as count, 0.0 as probability
insert into MarkovModelTable;

from transitionStream as t join MarkovModelTable
select t.transition, (count+1) as count
update MarkovModelTable
on transition == MarkovModelTable.transition;

from transitionStream as t join firstCountTable
on t.firstState == firstCountTable.firstState
select t.transition, t.firstState, firstCountTable.count
insert into temp;

from temp as t join MarkovModelTable
on t.firstState == MarkovModelTable.firstState
select MarkovModelTable.transition, MarkovModelTable.firstState, MarkovModelTable.count, (MarkovModelTable.count/t.count) as probability
update MarkovModelTable
on firstState == MarkovModelTable.firstState;
                    