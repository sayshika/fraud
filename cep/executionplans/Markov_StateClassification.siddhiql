/* Enter a unique ExecutionPlan */
@Plan:name('Markov_StateClassification')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('transactionStream:1.0.0')
define stream input (txnid string, cardnum long, txnamt double, currency string, email string, shippingaddress string, billingaddress string, ip string, itemNo string, qty int, timestamp long);

@Export('stateStream:1.0.0')
define stream stateStream (txnid string, cardnum long, txnamt double, currency string, email string, shippingaddress string, billingaddress string, ip string, itemNo string, qty int, timestamp long, state string);

@from(eventtable = 'rdbms' , datasource.name = 'FraudToolbox' , table.name = 'AverageAmountTable')
define table AverageAmountTable (AmountID  int  , AverageAmount double , AmountCount double); 

@from(eventtable = 'rdbms' , datasource.name = 'FraudToolbox' , table.name = 'AverageDurationTable')
define table AverageDurationTable (DurationID  int  , AverageDuration double , DurationCount double); 

@from(eventtable = 'rdbms' , datasource.name = 'FraudToolbox' , table.name = 'expensiveItem')
define table expensiveItem (itemNo string);


/******************************************* Determine the Amount flag ****************************************************************************************************************************************************************************/
from input
select txnamt*3.0/2 as lowAmount, txnamt*3.0/4 as highAmount, txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp 
insert into tempAmountStream;

from tempAmountStream join AverageAmountTable
on tempAmountStream.lowAmount <= AverageAmountTable.AverageAmount
select  txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp, 'L' as AmountFlag
insert into AmountFlagStream;

from tempAmountStream join AverageAmountTable
on  tempAmountStream.txnamt > AverageAmountTable.AverageAmount and tempAmountStream.txnamt < AverageAmountTable.AverageAmount
select  txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp, 'M' as AmountFlag
insert into AmountFlagStream;

from tempAmountStream join AverageAmountTable
on tempAmountStream.highAmount >= AverageAmountTable.AverageAmount
select  txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp, 'H' as AmountFlag
insert into AmountFlagStream;

/****************************************** Determine the Ticket flag *****************************************************************************************************************************************************************************/
from input[(itemNo == expensiveItem.itemNo) in expensiveItem]
select input.txnid, 'T' as TicketFlag
insert into TicketFlagStream;

from input[not((itemNo == expensiveItem.itemNo) in expensiveItem)]
select  input.txnid , 'F' as TicketFlag
insert into TicketFlagStream;

/***************************************** Determine Duration *********************************************************************************************************************************************************************************/

from every t1 = input ->
  t2 = input [t2.cardnum == t1.cardnum]
 select 1 as  DurationID, t2.txnid, (t2.timestamp - t1.timestamp) as Duration, ((t2.timestamp - t1.timestamp)*3.0/2) as lowDuration, ((t2.timestamp - t1.timestamp)*3.0/4) as highDuration
insert into DurationStream;


/***************************************** Determine Duration flag *********************************************************************************************************************************************************************************/
from DurationStream join AverageDurationTable
on DurationStream.lowDuration  <= AverageDurationTable.AverageDuration
select DurationStream.txnid , 'S' as DurationFlag
insert into DurationFlagStream;

from DurationStream join AverageDurationTable
on DurationStream.lowDuration> AverageDurationTable.AverageDuration and DurationStream.highDuration < AverageDurationTable.AverageDuration
select  DurationStream.txnid ,'M' as DurationFlag
insert into DurationFlagStream;


from DurationStream join AverageDurationTable
on DurationStream.highDuration >= AverageDurationTable.AverageDuration
select DurationStream.txnid , 'H' as DurationFlag
insert into DurationFlagStream;

/***************************************** Determine the state ************************************************************************************************************************************************************************************/
from AmountFlagStream join TicketFlagStream
on AmountFlagStream.txnid == TicketFlagStream.txnid
select AmountFlagStream.txnid , cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp, str:concat(AmountFlagStream.AmountFlag, TicketFlagStream.TicketFlag ) as state1
insert into AmountTicketStream;


from  AmountTicketStream join DurationFlagStream
on AmountTicketStream.txnid == DurationFlagStream.txnid
select AmountTicketStream.txnid, cardnum, txnamt, currency, email, shippingaddress, billingaddress, ip, itemNo, qty, timestamp, str:concat(AmountTicketStream.state1, DurationFlagStream.DurationFlag ) as state
insert into stateStream;

/******************************************* Update Average Duration ***************************************************************************************************************************************************************************/

from DurationStream as d join AverageDurationTable as a
on d.DurationID == a.DurationID 
select 1 as DurationID, ((AverageDuration*DurationCount + Duration)/(DurationCount+1)) as AverageDuration, (DurationCount+1) as DurationCount
insert into DurationUpdateStream;

from  DurationUpdateStream
update AverageDurationTable 
on AverageDurationTable.DurationID == DurationID;

/******************************************* Update Average Amount ***************************************************************************************************************************************************************************/
from input as i join AverageAmountTable as a
on 1 == a.AmountID 
select 1 as AmountID, ((AverageAmount*AmountCount + txnamt)/(AmountCount+1)) as AverageAmount, (AmountCount +1) as AmountCount
insert into AmountStream;

from AmountStream 
update AverageAmountTable
on AverageAmountTable.AmountID == AmountID;